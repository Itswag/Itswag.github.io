<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android数据储存之SharedPreferences-记住密码案例</title>
    <url>/posts/f454cc8e/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/wx_title-android_2018.11.09.png' >
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>SharedPreferences是一种轻型的数据存储方式,通过键值对的形式保存数据，存储数据是以xml文件形式存储，文件存放在/data/data//shared_prefs目录下,一般用来存储一些简单的配置信息。</p>
</blockquote>
<h2 id="SharedPreferences操作模式"><a href="#SharedPreferences操作模式" class="headerlink" title="SharedPreferences操作模式"></a>SharedPreferences操作模式</h2><ol>
<li>MODE_PRIVATE：默认的操作模式，同名文件内容会被覆盖。</li>
<li>MODE_APPEND：则表示如果该文件已存在就往文件里面追加内容，不存在就创建新文件。</li>
</ol>
<h2 id="初始化SharedPreferences"><a href="#初始化SharedPreferences" class="headerlink" title="初始化SharedPreferences"></a>初始化SharedPreferences</h2><h3 id="Activity类中的getPreferences-mode-方法"><a href="#Activity类中的getPreferences-mode-方法" class="headerlink" title="Activity类中的getPreferences(mode)方法"></a>Activity类中的getPreferences(mode)方法</h3><ul>
<li>mode：指定操作模式</li>
<li>默认以当前类的类名作为前缀命名文件</li>
</ul>
<h3 id="Context类中的getSharedPreferences-name-mode-方法"><a href="#Context类中的getSharedPreferences-name-mode-方法" class="headerlink" title="Context类中的getSharedPreferences(name, mode)方法"></a>Context类中的getSharedPreferences(name, mode)方法</h3><ul>
<li>用于指定SharedPreferences文件的名称</li>
<li>指定操作模式</li>
</ul>
<h3 id="PreferenceManager类中的getDefaultSharedPreferences-context-方法"><a href="#PreferenceManager类中的getDefaultSharedPreferences-context-方法" class="headerlink" title="PreferenceManager类中的getDefaultSharedPreferences(context)方法"></a>PreferenceManager类中的getDefaultSharedPreferences(context)方法</h3><ul>
<li>静态方法，使用当前应用程序的包名作为前缀命名文件</li>
</ul>
<p> <code>注：SharedPreferences可实现数据共享，但是无法直接在多个程序间共享，需要借助于Conttent Providers(内容分发者)</code></p>
<h2 id="SharedPreferences存储数据"><a href="#SharedPreferences存储数据" class="headerlink" title="SharedPreferences存储数据"></a>SharedPreferences存储数据</h2><ol>
<li>SharedPreferences通过Editor进行数据的编辑处理。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Editor editor=sharedPreferences.edit();</span><br></pre></td></tr></table></figure></li>
<li>存放数据<br>以Key-Value的形式储存，只适用于一些简单的数据类型<br><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/shareputdata20181108234424.png" alt="数据类型"></li>
<li>提交保存<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后台提交，没有返回值</span></span><br><span class="line">editor.apply();</span><br><span class="line"><span class="comment">//编译处理，返回Boolean</span></span><br><span class="line">editor.commit();</span><br></pre></td></tr></table></figure>
<code>注：apply是将修改数据原子提交到内存,而后异步真正提交到硬件磁盘,而commit是同步的提交到硬件磁盘，因此，在多个并发的提交commit的时候，他们会等待正在处理的commit保存到磁盘后在操作，从而降低了效率。而apply只是原子的提交到内容，后面有调用apply的函数的将会直接覆盖前面的内存数据，这样从一定程度上提高了很多效率。</code></li>
<li>移除数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//移除数据</span></span><br><span class="line">editor.remove(String key);</span><br><span class="line"><span class="comment">//清空数据</span></span><br><span class="line">editor.clear();</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>读取数据<br><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/shareGetData20181108235553.png" alt="getData"></li>
</ol>
<h2 id="记住密码案列"><a href="#记住密码案列" class="headerlink" title="记住密码案列"></a>记住密码案列</h2><p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/gif/111.gif" alt="记住密码~"></p>
<figure class="highlight java"><figcaption><span>部分Java代码</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//XML文件的形式储存</span></span><br><span class="line"><span class="comment">//设置本程序的私有访问</span></span><br><span class="line">      sharedPreferences=getSharedPreferences(<span class="string">&quot;userInfo&quot;</span>,MODE_PRIVATE);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取程序中已保存的信息</span></span><br><span class="line">      rememeber.setChecked(sharedPreferences.getBoolean(<span class="string">&quot;rememeber&quot;</span>,<span class="keyword">false</span>));</span><br><span class="line">      mName.setText(sharedPreferences.getString(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">      mPassWord.setText(sharedPreferences.getString(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">      mLogin.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">              String name=mName.getText().toString();</span><br><span class="line">              String password=mPassWord.getText().toString();</span><br><span class="line">              Editor editor=sharedPreferences.edit();</span><br><span class="line">              <span class="keyword">if</span>(name.equals(<span class="string">&quot;admin&quot;</span>)&amp;&amp;password.equals(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">                  <span class="comment">//标记是否勾选记住密码</span></span><br><span class="line">                  <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">                  <span class="keyword">if</span>(rememeber.isChecked())&#123;</span><br><span class="line">                       flag=<span class="keyword">true</span>;</span><br><span class="line">                      editor.putString(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">                      editor.putString(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line">                      editor.putBoolean(<span class="string">&quot;rememeber&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                  editor.putBoolean(<span class="string">&quot;rememeber&quot;</span>,flag);</span><br><span class="line">                  editor.commit();</span><br><span class="line">                  startActivityForResult(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,Main2Activity.class).putExtra(<span class="string">&quot;rememeber&quot;</span>,flag),<span class="number">1</span>);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>
<p>下载地址: 等待上传~~</p>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>数据储存</tag>
      </tags>
  </entry>
  <entry>
    <title>Android网络编程之HttpURLConnection应用-快递查询案例</title>
    <url>/posts/660e61a1/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/2018.12.06_blog_title_httpdemo.png'>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p><strong>HttpURLConnection</strong>是一种多用途、轻量极的HTTP客户端。它的API简单，体积较小，因而非常适用于Android项目，压缩和缓存机制可以有效地减少网络访问的流量，在提升速度和省电方面也起到了较大的作用，使用它来进行HTTP操作可以适用于大多数的应用程序。HttpUrlConnection是Android SDK的标准实现，直接支持系统级连接池，即打开的连接不会直接关闭，在一段时间内所有程序可共用；直接在系统层面做了缓存策略处理，加快重复请求的速度</p>
</blockquote>
<p>本文将以一个查询快递信息的案例来介绍，包括GET，POST两中方式请求网络资源，解析JSON数据，Handler异步消息处理机制等应用~</p>
<h2 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h2><ul>
<li>主界面<br><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/20181206200417_blog_adroid_httpdemo.png"></li>
<li>这里主要介绍GET和POST两种网络请求方式<figure class="highlight java"><figcaption><span>GET方式</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(<span class="keyword">final</span> String params)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//子线程执行网络操作</span></span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   URL url = <span class="keyword">new</span> URL(URL_Source+<span class="string">&quot;?type=&quot;</span>+URLEncoder.encode(Param_DHL,<span class="string">&quot;UTF-8&quot;</span>)+<span class="string">&quot;&amp;postid=&quot;</span>+URLEncoder.encode(params,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                   HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">                   httpURLConnection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);<span class="comment">//设置请求方式为GET</span></span><br><span class="line">                   httpURLConnection.setReadTimeout(<span class="number">3000</span>);<span class="comment">//设置连接超时时间</span></span><br><span class="line">                   <span class="keyword">if</span>(httpURLConnection.getResponseCode() == <span class="number">200</span>)&#123;</span><br><span class="line">                       InputStream is = httpURLConnection.getInputStream();</span><br><span class="line">                       BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">                       String line =<span class="string">&quot;&quot;</span>;</span><br><span class="line">                       StringBuffer result= <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                       <span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                             result.append(line);</span><br><span class="line">                       &#125;</span><br><span class="line">                       is.close();</span><br><span class="line">                       br.close();</span><br><span class="line"></span><br><span class="line">                       httpURLConnection.disconnect();<span class="comment">//关闭连接</span></span><br><span class="line">                       Message message =<span class="keyword">new</span> Message();<span class="comment">//创建消息体</span></span><br><span class="line">                       message.what = <span class="number">1</span>;</span><br><span class="line">                       message.obj = parseData(result.toString());</span><br><span class="line">                       handler.sendMessage(message);<span class="comment">//发送消息体，添加到消息队列中</span></span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).start();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight java"><figcaption><span>POST方式</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(<span class="keyword">final</span> String params)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   URL url = <span class="keyword">new</span> URL(URL_Source);</span><br><span class="line">                   HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">                   httpURLConnection.setConnectTimeout(<span class="number">3000</span>);     <span class="comment">//设置连接超时时间</span></span><br><span class="line">                   httpURLConnection.setDoInput(<span class="keyword">true</span>);            <span class="comment">//打开输入流，以便从服务器获取数据</span></span><br><span class="line">                   httpURLConnection.setDoOutput(<span class="keyword">true</span>);           <span class="comment">//打开输出流，以便向服务器提交数据</span></span><br><span class="line">                   httpURLConnection.setUseCaches(<span class="keyword">false</span>);         <span class="comment">//禁用缓存</span></span><br><span class="line">                   httpURLConnection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">                   httpURLConnection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);<span class="comment">//设置数据编码方式</span></span><br><span class="line">                   String param =<span class="string">&quot;type=&quot;</span>+URLEncoder.encode(Param_DHL,<span class="string">&quot;UTF-8&quot;</span>) +<span class="string">&quot;&amp;postid=&quot;</span>+URLEncoder.encode(params,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">                   OutputStream os = httpURLConnection.getOutputStream();</span><br><span class="line">                   os.write(param.getBytes());</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span>(httpURLConnection.getResponseCode() == <span class="number">200</span>)&#123;</span><br><span class="line">                       InputStream is = httpURLConnection.getInputStream();</span><br><span class="line">                       BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">                       String line =<span class="string">&quot;&quot;</span>;</span><br><span class="line">                       StringBuffer result= <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                       <span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                           result.append(line);</span><br><span class="line">                       &#125;</span><br><span class="line">                       is.close();</span><br><span class="line">                       br.close();</span><br><span class="line"></span><br><span class="line">                       httpURLConnection.disconnect();<span class="comment">//关闭连接</span></span><br><span class="line">                       Message message =<span class="keyword">new</span> Message();</span><br><span class="line">                       message.what = <span class="number">2</span>;</span><br><span class="line">                       message.obj = parseData(result.toString());</span><br><span class="line">                       handler.sendMessage(message);</span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>JSON数据的解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">parseData</span><span class="params">(String json)</span></span>&#123;</span><br><span class="line">       String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           JSONObject jsonObject = <span class="keyword">new</span> JSONObject(json);</span><br><span class="line">           JSONArray data = jsonObject.getJSONArray(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">           <span class="comment">//这里只取最新的一条数据显示</span></span><br><span class="line">             <span class="keyword">if</span>(data.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                 result=<span class="string">&quot;更新时间: &quot;</span>+data.getJSONObject(<span class="number">0</span>).getString(<span class="string">&quot;time&quot;</span>)+</span><br><span class="line">                         <span class="string">&quot;\n状态: &quot;</span>+data.getJSONObject(<span class="number">0</span>).getString(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 result = <span class="string">&quot;该单号暂无物流进展,请稍后再试,或检查公司和单号是否有误&quot;</span>;</span><br><span class="line">             &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用Handler更新UI</p>
</li>
</ul>
<figure class="highlight java"><figcaption><span>更新TextView</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(msg.what == <span class="number">1</span>)&#123;</span><br><span class="line">           message.setText(<span class="string">&quot;最新状态 (GET方式)&quot;</span>);</span><br><span class="line">           info.setText(msg.obj+<span class="string">&quot;&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (msg.what == <span class="number">2</span>)&#123;</span><br><span class="line">           message.setText(<span class="string">&quot;最新状态 (POST方式)&quot;</span>);</span><br><span class="line">           info.setText(msg.obj+<span class="string">&quot;&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h2><p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/gif/20181206_android_httpdemo.gif"></p>
<h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><p>等待上传中~</p>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>网络编程</tag>
        <tag>JSON</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS更换Yum源为阿里云源</title>
    <url>/posts/e8a99a62/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/wx_title_centos_yum_2018.11.21.png' >
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Yum仓库部署在国外，为了方便之后项目环境的部署更新操作，最好更新为国内的镜像源，本文以阿里云源为例。<br>参考网站:<a href="https://opsx.alibaba.com/mirror">https://opsx.alibaba.com/mirror</a></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-备份"><a href="#1-备份" class="headerlink" title="1.备份"></a>1.备份</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/20181121_centosbf.png" alt="图中即为重命名的备份文件"></p>
<h3 id="2-下载阿里云的源文件"><a href="#2-下载阿里云的源文件" class="headerlink" title="2.下载阿里云的源文件"></a>2.下载阿里云的源文件</h3><p>这里我的虚拟机版本为CentOS 7，这里根据你的版本进行操作，参考上文链接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http:<span class="comment">//mirrors.aliyun.com/repo/Centos-7.repo</span></span><br></pre></td></tr></table></figure>
<p><font color="red">注意：这里需要给与管理员权限<font/><br><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/20181121213830.png" alt="在这里插入图片描述"></p>
<h3 id="3-生成缓存"><a href="#3-生成缓存" class="headerlink" title="3.生成缓存"></a>3.生成缓存</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/20181121214100.png" alt="在这里插入图片描述"></p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>如果更换源后出现问题，则需要先清除默认Yum源的本地缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Yum</tag>
      </tags>
  </entry>
  <entry>
    <title>Android自定义Dialog对话框</title>
    <url>/posts/1bd356c0/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/20181119_wx_title_dialog.png' >
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>Android项目经常需要使用对话框来进行交互，本文将介绍一个简单自定义的Dialog案例</p>
</blockquote>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/gif/20181119dialogdemo.gif" alt="在这里插入图片描述"></p>
<h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><h3 id="自定义Dialog布局"><a href="#自定义Dialog布局" class="headerlink" title="自定义Dialog布局"></a>自定义Dialog布局</h3><figure class="highlight xml"><figcaption><span>这里自由发挥，请尽情定义属于你的对话框!</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MyDialog&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;@drawable/dialog_layout&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/title&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:textColor=&quot;#000&quot;</span><br><span class="line">        android:text=&quot;提示&quot;</span><br><span class="line">        android:textStyle=&quot;bold&quot;</span><br><span class="line">        android:textSize=&quot;24sp&quot;</span><br><span class="line">        android:gravity=&quot;center&quot;</span><br><span class="line">        android:padding=&quot;10dp&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/message&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:textSize=&quot;18sp&quot;</span><br><span class="line">        android:textColor=&quot;#000&quot;</span><br><span class="line">        android:padding=&quot;20dp&quot;</span><br><span class="line">        android:gravity=&quot;center&quot;</span><br><span class="line">        android:text=&quot;删除&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;View</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;0.5dp&quot;</span><br><span class="line">        android:background=&quot;#000&quot;</span><br><span class="line">        &gt;<span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:padding=&quot;10dp&quot;</span><br><span class="line">            android:id=&quot;@+id/canel&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot;</span><br><span class="line">            android:textColor=&quot;#11c2ee&quot;</span><br><span class="line">            android:textSize=&quot;24sp&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;/&gt;</span><br><span class="line">            </span><br><span class="line">        &lt;View</span><br><span class="line">            android:layout_width=&quot;0.5dp&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:background=&quot;#000&quot;&gt;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:padding=&quot;10dp&quot;</span><br><span class="line">            android:id=&quot;@+id/confirm&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:textColor=&quot;#11c2ee&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot;</span><br><span class="line">            android:textSize=&quot;24sp&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">           /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义Dialog背景-圆角"><a href="#自定义Dialog背景-圆角" class="headerlink" title="自定义Dialog背景(圆角)"></a>自定义Dialog背景(圆角)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:shape</span>=<span class="string">&quot;rectangle&quot;</span>&gt;</span></span><br><span class="line">    //内部填充色</span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">&quot;#ffffff&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">solid</span>&gt;</span></span><br><span class="line">    //圆角半径</span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">&quot;20dp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">corners</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="通过style样式引用"><a href="#通过style样式引用" class="headerlink" title="通过style样式引用"></a>通过style样式引用</h3><figure class="highlight xml"><figcaption><span>更多配置属性请百度~</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;MyDialog&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;android:style/Theme.Dialog&quot;</span>&gt;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--背景颜色及和透明程度--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowBackground&quot;</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--是否去除标题 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowNoTitle&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--是否去除边框--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowFrame&quot;</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--是否浮现在activity之上--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowIsFloating&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--是否模糊--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:backgroundDimEnabled&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义Dialog类"><a href="#自定义Dialog类" class="headerlink" title="自定义Dialog类"></a>自定义Dialog类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sr.alertdialogdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Dialog;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Point;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.Display;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView mTitle,mMessage,mCanel,mConfirm;</span><br><span class="line">    <span class="keyword">private</span> String title,message,canel,confirm;</span><br><span class="line">    <span class="keyword">private</span> OnCancelListtener onCancelListtener;</span><br><span class="line">    <span class="keyword">private</span> OnConfirmListtener onConfirmListtener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyDialog <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyDialog <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyDialog <span class="title">setCanel</span><span class="params">(String canel,OnCancelListtener onCancelListtener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.canel = canel;</span><br><span class="line">        <span class="keyword">this</span>.onCancelListtener = onCancelListtener;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyDialog <span class="title">setConfirm</span><span class="params">(String confirm,OnConfirmListtener onConfirmListtener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.confirm = confirm;</span><br><span class="line">        <span class="keyword">this</span>.onConfirmListtener = onConfirmListtener;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDialog</span><span class="params">(<span class="meta">@NonNull</span> Context context,<span class="keyword">int</span> themeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context,themeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_my_dialog);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果对话框宽度异常，可以通过下方代码根据设备的宽度来设置弹窗宽度</span></span><br><span class="line">        WindowManager windowManager = getWindow().getWindowManager();</span><br><span class="line">        Display display = windowManager.getDefaultDisplay();</span><br><span class="line">        WindowManager.LayoutParams params = getWindow().getAttributes();</span><br><span class="line">        Point point=<span class="keyword">new</span> Point();</span><br><span class="line">        display.getSize(point);</span><br><span class="line">        params.width= (<span class="keyword">int</span>) (point.x * <span class="number">0.8</span>);</span><br><span class="line">        getWindow().setAttributes(params);</span><br><span class="line"></span><br><span class="line">        mTitle=findViewById(R.id.title);</span><br><span class="line">        mMessage=findViewById(R.id.message);</span><br><span class="line">        mCanel=findViewById(R.id.canel);</span><br><span class="line">        mConfirm=findViewById(R.id.confirm);</span><br><span class="line"></span><br><span class="line">        mCanel.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mConfirm.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        mTitle.setText(title);</span><br><span class="line">        mMessage.setText(message);</span><br><span class="line">        mCanel.setText(canel);</span><br><span class="line">        mConfirm.setText(confirm);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.canel:</span><br><span class="line">              <span class="keyword">if</span>(onCancelListtener != <span class="keyword">null</span>)&#123;</span><br><span class="line">                  onCancelListtener.onCancel(<span class="keyword">this</span>);</span><br><span class="line">              &#125;</span><br><span class="line">                dismiss();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> R.id.confirm:</span><br><span class="line">                <span class="keyword">if</span>(onConfirmListtener != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    onConfirmListtener.onConfirm(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                dismiss();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义接口形式提供回调方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnCancelListtener</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onCancel</span><span class="params">(MyDialog myDialog)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnConfirmListtener</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onConfirm</span><span class="params">(MyDialog myDialog)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="调用演示"><a href="#调用演示" class="headerlink" title="调用演示"></a>调用演示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        button=findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                MyDialog myDialog=<span class="keyword">new</span> MyDialog(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">                myDialog.setTitle(<span class="string">&quot;提示&quot;</span>).setMessage(<span class="string">&quot;这是一个自定义的Dialog&quot;</span>).setCanel(<span class="string">&quot;取消&quot;</span>, <span class="keyword">new</span> MyDialog.OnCancelListtener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">(MyDialog myDialog)</span> </span>&#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">&quot;点击了取消按钮&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).setConfirm(<span class="string">&quot;确认&quot;</span>, <span class="keyword">new</span> MyDialog.OnConfirmListtener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfirm</span><span class="params">(MyDialog myDialog)</span> </span>&#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">&quot;点击了确认按钮&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目下载"><a href="#项目下载" class="headerlink" title="项目下载"></a>项目下载</h2><p>等待上传~</p>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>数据储存</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Data JPA 映射VO/DTO对象</title>
    <url>/posts/17193f90/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/weixin_title_2019.05.13.png' >
<span id="more"></span>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>在项目开发中,时常需要根据业务需求来映射VO/DTO对象(这两个概念理解感觉很模糊- 。- )，本文将简单介绍以Spring Data JPA的方式处理实体类映射</p>
</blockquote>
<h2 id="HQL方式"><a href="#HQL方式" class="headerlink" title="HQL方式"></a>HQL方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MusicTypeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">MusicType</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Query(&quot;select new cn.srblog.springbootcurd.vo.StudentTypeInfoVo(count(s.id),m.name) &quot; +</span></span><br><span class="line"><span class="meta">             &quot;FROM MusicType m  left JOIN Student s on s.musicTypeId = m.id group by m.id &quot;)</span></span><br><span class="line">     <span class="function">List&lt;StudentTypeInfoVo&gt; <span class="title">getTypeInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>填写实体类路径,构造参数顺序要一致,字段名一律为实体类中的属性</li>
<li>如果配置了实体类属性的映射关系，则<code>on s.musicTypeId = m.id</code>语句可以省略</li>
</ul>
<h3 id="VO实体类"><a href="#VO实体类" class="headerlink" title="VO实体类"></a>VO实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTypeInfoVo</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用<code>Lombok</code>的 <code>@Value</code> 注解</p>
<ul>
<li>默认生成带参构造方法</li>
<li>默认为成员变量添加<code>final</code>修饰,且只提供getter()方法</li>
</ul>
<h2 id="原生SQL的形式"><a href="#原生SQL的形式" class="headerlink" title="原生SQL的形式"></a>原生SQL的形式</h2><h3 id="接口形式"><a href="#接口形式" class="headerlink" title="接口形式"></a>接口形式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoursePlanRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">CoursePlan</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Query(nativeQuery = true,value = &quot;SELECT &quot; +</span></span><br><span class="line"><span class="meta">               &quot; c.id as id,&quot; +</span></span><br><span class="line"><span class="meta">               &quot;DAYOFWEEK(c.start_time) as week,&quot; +</span></span><br><span class="line"><span class="meta">               &quot;m.name as musicType,&quot; +</span></span><br><span class="line"><span class="meta">               &quot;t.name as teacherName,&quot; +</span></span><br><span class="line"><span class="meta">               &quot;c.start_time as startTime,&quot; +</span></span><br><span class="line"><span class="meta">               &quot;c.end_time as endTime &quot; +</span></span><br><span class="line"><span class="meta">               &quot; FROM t_courseplan c,t_musictype m , t_teacher t &quot; +</span></span><br><span class="line"><span class="meta">               &quot; WHERE DATE(c.start_time) &lt; DATE_ADD(CURDATE(), INTERVAL 7 DAY ) AND CURDATE() &lt;= DATE(c.start_time) &quot; +</span></span><br><span class="line"><span class="meta">               &quot; and t.id=c.tea_id and c.music_type_id = m.id order by c.start_time &quot;)</span></span><br><span class="line">       <span class="function">List&lt;CoursePlanVos&gt; <span class="title">getWeekList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>nativeQuery = true 表示开启原生SQL查询</li>
<li>查询字段别名需要与实体类中字段一一对应</li>
<li>该方法功能为查询一周后的数据</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>DAYOFWEEK()</td>
<td>DAYOFWEEK函数返回日期的工作日索引值，即星期日为1，星期一为2，星期六为7。例:<code>DAYOFWEEK(&#39;2019-05-09&#39;)</code> 返回 <code>5</code></td>
</tr>
<tr>
<td>DATE()</td>
<td>提取日期或日期/时间表达式的日期部分,格式<code>&#39;YYYY-MM-DD&#39;</code>或者<code>&#39;YYYYMMDD&#39;</code></td>
</tr>
<tr>
<td>DATE_ADD(date,INTERVAL expr unit)</td>
<td>给日期添加指定的时间间隔。date 参数是合法的日期表达式,expr 参数是您希望添加的时间间隔,type 参数可以是MySQL支持的时间日期相关类型值</td>
</tr>
<tr>
<td>CURDATE()</td>
<td>返回当前日期  例:<code>&#39;2019-05-09&#39;</code></td>
</tr>
</tbody></table>
<h4 id="VO实体类-接口形式"><a href="#VO实体类-接口形式" class="headerlink" title="VO实体类(接口形式)"></a>VO实体类(接口形式)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoursePlanVos</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">getWeek</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getMusicType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getTeacherName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Date <span class="title">getStartTime</span><span class="params">()</span> </span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Date <span class="title">getEndTime</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果集形式"><a href="#结果集形式" class="headerlink" title="结果集形式"></a>结果集形式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query(value = &quot;select count(s.id) as count,m.name as name &quot; +</span></span><br><span class="line"><span class="meta">             &quot; FROM t_musictype m  left JOIN t_student s on s.music_type_id = m.id group by m.id &quot;,nativeQuery = true)</span></span><br><span class="line">    List&lt;Object[]&gt; listType1();</span><br></pre></td></tr></table></figure>

<p>对比第一种方法,使用原生SQL默认会返回Object数组</p>
]]></content>
      <tags>
        <tag>Spring Data JPA</tag>
        <tag>JpaRepository</tag>
        <tag>VO</tag>
        <tag>HQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架结合LayUi文件上传模块接入COS对象存储服务</title>
    <url>/posts/2502e0fe/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/2019.01.05_wx-cos.png'>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在日常项目开发中经常会用到图片，视频等文件存储的操作，但是文件如果一直存放在本地服务器中，可以会导致资源浪费，且访问速度也有所限制，这时我们就会考虑<strong>CDN加速</strong>或<strong>云端存储</strong>等方式来解决问题，这里就要介绍下本文用到的<strong>COS对象存储</strong>-安全稳定、海量、便捷、低延迟、低成本的云端存储服务。</p>
<h3 id="COS对象存储"><a href="#COS对象存储" class="headerlink" title="COS对象存储"></a>COS对象存储</h3><blockquote>
<p>对象存储（Cloud Object Storage，COS）是腾讯云提供的面向非结构化数据，支持 HTTP/HTTPS 协议访问的分布式存储服务，它能容纳海量数据并保证用户对带宽和容量扩充无感知，可以作为大数据计算与分析的数据池。腾讯云 COS 提供网页端管理界面、多种语言的 SDK 以及命令行和图形化工具，并且完全兼容 S3 的 API 接口，方便用户直接使用社区工具和插件，COS 还可以和其他云产品结合，比如利用 CDN 的全球节点提供加速服务，利用数据万象的图片处理能力提供一站式图片解决方案等(<a href="https://cloud.tencent.com/product/cos">详细介绍</a>)</p>
</blockquote>
<h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><ul>
<li>本文使用的是腾讯云提供的COS服务，每个月提供50G存储容量，10G流量，对于一般的博客网站，以及项目测试来说绰绰有余</li>
<li>腾讯云对象存储 COS 除了提供多种 API 接口，还提供了丰富多样的 SDK 供开发者使用，如Java、Python、Js等…，本项目后台基于SpringMVC实现，前端通过LayUi框架的文件上传模块结合实现</li>
<li>存储桶相应的还有<strong>防盗链</strong>设置，<strong>跨域规则</strong>设置，<strong>读写权限</strong>设置，以及相应的<strong>CDN加速</strong>服务<br><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/emoji/2019-01-05%20154723-zx.jpg" alt="www.srblog.cn"></li>
</ul>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><figcaption><span>后台实现</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.mall.controller.portal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.mall.common.ServerResponse;</span><br><span class="line"><span class="keyword">import</span> cn.mall.util.PropertiesUtil;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.COSClient;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.ClientConfig;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.auth.BasicCOSCredentials;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.auth.COSCredentials;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.model.PutObjectRequest;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.model.PutObjectResult;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.region.Region;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密钥请前往腾讯云后台查询</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String secretId=<span class="string">&quot;*************&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String secretKey=<span class="string">&quot;*************&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String bucketName=<span class="string">&quot;你的存储桶名称&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String RegionName=<span class="string">&quot;存储桶所属地域&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;upload_image_cos.do&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">Upload</span><span class="params">(<span class="meta">@RequestParam(value = &quot;file&quot;)</span> MultipartFile file, HttpSession session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(file == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UploadMsg(<span class="number">0</span>,<span class="string">&quot;文件为空&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取文件上传原名</span></span><br><span class="line">        String oldFileName = file.getOriginalFilename();</span><br><span class="line">        String eName = oldFileName.substring(oldFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//通过UUID随机生成新的文件名</span></span><br><span class="line">        String newFileName = UUID.randomUUID()+eName;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 1 初始化用户身份信息(secretId, secretKey)</span></span><br><span class="line">        COSCredentials cred = <span class="keyword">new</span> BasicCOSCredentials(secretId, secretKey);</span><br><span class="line">        <span class="comment">// 2 设置bucket的区域, COS地域的简称请参照 https://cloud.tencent.com/document/product/436/6224</span></span><br><span class="line">        ClientConfig clientConfig = <span class="keyword">new</span> ClientConfig(<span class="keyword">new</span> Region(RegionName));</span><br><span class="line">        <span class="comment">// 3 生成cos客户端</span></span><br><span class="line">        COSClient cosclient = <span class="keyword">new</span> COSClient(cred, clientConfig);</span><br><span class="line">        <span class="comment">// bucket的命名规则为&#123;name&#125;-&#123;appid&#125; ，此处填写的存储桶名称必须为此格式</span></span><br><span class="line">        String bucketName = <span class="keyword">this</span>.bucketName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简单文件上传, 最大支持 5 GB, 适用于小文件上传, 建议 20 M 以下的文件使用该接口</span></span><br><span class="line">        <span class="comment">// 大文件上传请参照 API 文档高级 API 上传</span></span><br><span class="line">        File localFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建临时文件</span></span><br><span class="line">            localFile = File.createTempFile(<span class="string">&quot;temp&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">            file.transferTo(localFile);</span><br><span class="line">            <span class="comment">// 指定要上传到 COS 上的路径</span></span><br><span class="line">            String key = PropertiesUtil.getProperty(<span class="string">&quot;cos_key_name&quot;</span>)+newFileName;</span><br><span class="line">            PutObjectRequest putObjectRequest = <span class="keyword">new</span> PutObjectRequest(bucketName, key, localFile);</span><br><span class="line">            PutObjectResult putObjectResult = cosclient.putObject(putObjectRequest);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UploadMsg(<span class="number">1</span>,<span class="string">&quot;上传成功&quot;</span>, newFileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UploadMsg(-<span class="number">1</span>,e.getMessage(),<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭客户端(关闭后台线程)</span></span><br><span class="line">            cosclient.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义JSON消息体</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadMsg</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> status;</span><br><span class="line">        <span class="keyword">public</span> String msg;</span><br><span class="line">        <span class="keyword">public</span> String path;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UploadMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UploadMsg</span><span class="params">(<span class="keyword">int</span> status, String msg,String path)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.status =status;</span><br><span class="line">            <span class="keyword">this</span>.msg =msg;</span><br><span class="line">            <span class="keyword">this</span>.path =path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><figcaption><span>前台实现（完整表单）</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;renderer&quot;</span> content=<span class="string">&quot;webkit&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;商品添加&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;../assets/layui/css/layui.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form column-content-detail&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-tab-content&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-tab-item layui-show&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span><br><span class="line">                &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;商品标题：&lt;/label&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span><br><span class="line">                    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> required lay-verify=<span class="string">&quot;required&quot;</span> placeholder=<span class="string">&quot;请输入商品标题&quot;</span> autocomplete=<span class="string">&quot;off&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-input&quot;</span>&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span><br><span class="line">                &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;分类：&lt;/label&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span><br><span class="line">                    &lt;select name=<span class="string">&quot;categoryId&quot;</span> lay-verify=<span class="string">&quot;required&quot;</span>&gt;</span><br><span class="line">                        &lt;option value=<span class="string">&quot;&quot;</span>&gt;请选择分类&lt;/option&gt;</span><br><span class="line">                        &lt;option value=<span class="string">&quot;100001&quot;</span>&gt;家用电器&lt;/option&gt;</span><br><span class="line">                        &lt;option value=<span class="string">&quot;100002&quot;</span>&gt;数码3C&lt;/option&gt;</span><br><span class="line">                        &lt;option value=<span class="string">&quot;100003&quot;</span>&gt;服装箱包&lt;/option&gt;</span><br><span class="line">                        &lt;option value=<span class="string">&quot;100004&quot;</span>&gt;食品生鲜&lt;/option&gt;</span><br><span class="line">                        &lt;option value=<span class="string">&quot;100005&quot;</span>&gt;酒水饮料&lt;/option&gt;</span><br><span class="line">                    &lt;/select&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span><br><span class="line">                &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;图像上传：&lt;/label&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span><br><span class="line">                    &lt;img id=<span class="string">&quot;upload_img&quot;</span> src=<span class="string">&quot;../images/default_img.png&quot;</span> width=<span class="string">&quot;100&quot;</span> height=<span class="string">&quot;100&quot;</span>&gt;</span><br><span class="line">                    &lt;button type=<span class="string">&quot;button&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-btn&quot;</span> id=<span class="string">&quot;test1&quot;</span>&gt;</span><br><span class="line">                        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-icon&quot;</span>&gt;&amp;#xe67c;&lt;/i&gt;上传图片</span><br><span class="line">                    &lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-item layui-form-text&quot;</span>&gt;</span><br><span class="line">                &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;商品介绍：&lt;/label&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span><br><span class="line">                    &lt;textarea <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-textarea layui-hide&quot;</span> name=<span class="string">&quot;detail&quot;</span> lay-verify=<span class="string">&quot;detail&quot;</span> id=<span class="string">&quot;LAY_demo_editor&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;hidden&quot;</span> id=<span class="string">&quot;mainImage&quot;</span> name=<span class="string">&quot;mainImage&quot;</span> required value=<span class="string">&quot;default_img.png&quot;</span>  <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-input&quot;</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;hidden&quot;</span> id=<span class="string">&quot;status&quot;</span> name=<span class="string">&quot;status&quot;</span> value=<span class="string">&quot;1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-input&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span><br><span class="line">                &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;商品库存：&lt;/label&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span><br><span class="line">                    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;stock&quot;</span> required lay-verify=<span class="string">&quot;number&quot;</span> placeholder=<span class="string">&quot;请输入商品库存&quot;</span> autocomplete=<span class="string">&quot;off&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-input&quot;</span>&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span><br><span class="line">                &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-label&quot;</span>&gt;商品价格：&lt;/label&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span><br><span class="line">                    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;price&quot;</span> required lay-verify=<span class="string">&quot;number&quot;</span> placeholder=<span class="string">&quot;请输入商品价格&quot;</span> autocomplete=<span class="string">&quot;off&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-input&quot;</span>&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-form-item&quot;</span> style=<span class="string">&quot;padding-left: 10px;&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span><br><span class="line">            &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-btn&quot;</span> lay-submit lay-filter=<span class="string">&quot;add_product&quot;</span>&gt;立即提交&lt;/button&gt;</span><br><span class="line">            &lt;button id=<span class="string">&quot;reset&quot;</span> type=<span class="string">&quot;reset&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-btn layui-btn-primary&quot;</span>&gt;重置&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../js/cos-js-sdk-v5.min.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../js/jquery-1.10.2.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;../assets/layui/layui.all.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    layui.use([<span class="string">&#x27;form&#x27;</span>, <span class="string">&#x27;jquery&#x27;</span>, <span class="string">&#x27;laydate&#x27;</span>, <span class="string">&#x27;layer&#x27;</span>, <span class="string">&#x27;laypage&#x27;</span>, <span class="string">&#x27;element&#x27;</span>, <span class="string">&#x27;upload&#x27;</span>, <span class="string">&#x27;layedit&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> form = layui.form,</span><br><span class="line">            layer = layui.layer,</span><br><span class="line">            $ = layui.jquery,</span><br><span class="line">            laypage = layui.laypage,</span><br><span class="line">            laydate = layui.laydate,</span><br><span class="line">            layedit = layui.layedit,</span><br><span class="line">            element = layui.element,</span><br><span class="line">            upload=layui.upload;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个编辑器</span></span><br><span class="line">        <span class="keyword">var</span> editIndex = layedit.build(<span class="string">&#x27;LAY_demo_editor&#x27;</span>, &#123;</span><br><span class="line">            tool: [<span class="string">&#x27;strong&#x27;</span> <span class="comment">//加粗</span></span><br><span class="line">                , <span class="string">&#x27;italic&#x27;</span> <span class="comment">//斜体</span></span><br><span class="line">                , <span class="string">&#x27;underline&#x27;</span> <span class="comment">//下划线</span></span><br><span class="line">                , <span class="string">&#x27;del&#x27;</span> <span class="comment">//删除线</span></span><br><span class="line">                , <span class="string">&#x27;|&#x27;</span> <span class="comment">//分割线</span></span><br><span class="line">                , <span class="string">&#x27;left&#x27;</span> <span class="comment">//左对齐</span></span><br><span class="line">                , <span class="string">&#x27;center&#x27;</span> <span class="comment">//居中对齐</span></span><br><span class="line">                , <span class="string">&#x27;right&#x27;</span> <span class="comment">//右对齐</span></span><br><span class="line">                , <span class="string">&#x27;link&#x27;</span> <span class="comment">//超链接</span></span><br><span class="line">                , <span class="string">&#x27;unlink&#x27;</span> <span class="comment">//清除链接</span></span><br><span class="line">                , <span class="string">&#x27;image&#x27;</span> <span class="comment">//插入图片</span></span><br><span class="line">            ],</span><br><span class="line">            height: <span class="number">100</span></span><br><span class="line">        &#125;);</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">var</span> uploadInst = upload.render(&#123;</span><br><span class="line">            elem: <span class="string">&#x27;#test1&#x27;</span> <span class="comment">//绑定元素</span></span><br><span class="line">            ,<span class="attr">url</span>:<span class="string">&#x27;../upload/upload_image_cos.do&#x27;</span><span class="comment">//后台上传接口</span></span><br><span class="line">            ,<span class="attr">before</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123; <span class="comment">//obj参数包含的信息，跟 choose回调完全一致，可参见上文。</span></span><br><span class="line">                layer.msg(<span class="string">&#x27;上传中&#x27;</span>,&#123;<span class="attr">icon</span>: <span class="number">16</span>,<span class="attr">time</span>:<span class="number">0</span>,<span class="attr">shade</span>:<span class="number">0.01</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            ,<span class="attr">done</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res, index, upload</span>)</span>&#123;</span><br><span class="line">                layer.closeAll(<span class="string">&#x27;loading&#x27;</span>);</span><br><span class="line">                <span class="comment">//status=1代表上传成功</span></span><br><span class="line">                <span class="keyword">if</span>(res.status == <span class="number">1</span>)&#123;</span><br><span class="line">                    layer.msg(<span class="string">&quot;上传成功&quot;</span>,&#123;<span class="attr">icon</span>:<span class="number">1</span>&#125;);</span><br><span class="line">                <span class="comment">//do something （比如将res返回的图片链接保存到表单的隐藏域）</span></span><br><span class="line">                    $(<span class="string">&#x27;#upload_img&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>,<span class="string">&#x27;https://sr-1251242863.cos.ap-shanghai.myqcloud.com/webdemo/images/&#x27;</span>+res.path);</span><br><span class="line">                    $(<span class="string">&#x27;#mainImage&#x27;</span>).val(res.path);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取当前触发上传的元素，一般用于 elem 绑定 class 的情况，注意：此乃 layui 2.1.0 新增</span></span><br><span class="line">                <span class="keyword">var</span> item = <span class="built_in">this</span>.item;</span><br><span class="line">                <span class="comment">//文件保存失败</span></span><br><span class="line">                <span class="comment">//do something</span></span><br><span class="line">            &#125;</span><br><span class="line">            ,<span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                layer.closeAll(<span class="string">&#x27;loading&#x27;</span>);</span><br><span class="line">                <span class="comment">//请求异常回调</span></span><br><span class="line">                layer.msg(<span class="string">&quot;上传失败，请重试&quot;</span>,&#123;<span class="attr">icon</span>:<span class="number">2</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            ,<span class="attr">size</span>:<span class="number">2048</span> <span class="comment">//文件大小限制</span></span><br><span class="line">            ,<span class="attr">number</span>:<span class="number">1</span> <span class="comment">//文件数量限制</span></span><br><span class="line">            ,<span class="attr">accept</span>: <span class="string">&#x27;images&#x27;</span> <span class="comment">//文件类型限制</span></span><br><span class="line">            ,<span class="attr">acceptMime</span>: <span class="string">&#x27;image/jpg, image/png&#x27;</span> <span class="comment">//选择窗口属性</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h2><p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/gif/2019-0105-10b99e3e-cos.gif" alt="www.srblog.cn"></p>
]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>SSM框架</tag>
        <tag>COS对象存储</tag>
        <tag>LayUi</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架入门(一):概念简介</title>
    <url>/posts/f9407374/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/wx_title_2018.10.30.png'>
<span id="more"></span>

<blockquote>
<p><strong>简介</strong></p>
</blockquote>
<p>Spring 是一个开源的轻量级 Java SE（ Java 标准版本）/Java EE（ Java 企业版本）开发应用框架，其目的是用于简化企业级应用程序开发。Spring容器通过反转控制( IoC )和依赖注入( DI )来实现高内聚、低耦合的应用。除此之外它可以整合很多第三方框架，它还提供面向切面编程（ AOP ）的能力，对通用任务如安全、事务、日志等进行集中式管理</p>
<blockquote>
<p><strong>概念介绍</strong></p>
</blockquote>
<ul>
<li> 框架：能完成一定功能的半成品，比如我们可以使用框架进行购物网站开发；框架做一部分功能，我们自己做一部分功能，辅助高效工作。而且框架规定了你在开发应用程序时的整体架构，提供了一些基础功能，还规定了类和对象的如何创建、如何协作等，从而简化我们的代码编写，让我们专注于业务逻辑开发。</li>
<li>非侵入式设计：从框架角度可以这样理解，无需继承框架提供的类，这种设计就可以看作是非侵入式设计，如果继承了这些框架类，就是侵入设计，如果以后想更换框架，之前写过的代码几乎无法重用，如果非侵入式设计则之前写过的代码仍然可以继续使用。</li>
<li>轻量级与重量级：轻量级是相对于重量级而言的，轻量级一般就是非入侵性的、所依赖的东西非常少、资源占用非常少、部署简单等等，其实就是比较容易使用，而重量级正好相反。</li>
<li>POJO ： POJO （ Plain Ordinary Java Object ）简单的 Java 对象。它可以包含业务逻辑或持久化逻辑，但不担当任何特殊角色且不继承或不实现任何其它 Java 框架的类或接口。</li>
<li>容器：在日常生活中容器就是一种盛放东西的器具，从程序设计角度看就是装对象的的对象，因为存在放入、拿出等操作，所以容器还要管理对象的生命周期。</li>
<li>控制反转：即 Inversion of Control ，缩写为 IoC ，控制反转还有一个名字叫做依赖注入（ Dependency Injection ），就是由容器控制程序之间的关系，而非传统实现中，由程序代码直接操控。</li>
<li>Bean ：一般指容器管理对象，在 Spring 中指 Spring IoC 容器管理对象。</li>
</ul>
<blockquote>
<p><strong>优点</strong></p>
</blockquote>
<ul>
<li>低侵入式设计，代码的污染极低。</li>
<li>独立于各种应用服务器，基于Spring框架的应用，可以真正实现Write Once，Run Anywhere的承诺。</li>
<li>Spring的IoC容器降低了业务对象替换的复杂性，提高了组件之间的解耦。</li>
<li>Spring的AOP支持允许将一些通用任务如安全、事务、日志等进行集中式管理，从而提供了更好的复用。</li>
<li>Spring的ORM和DAO提供了与第三方持久层框架的良好整合，并简化了底层的数据库访问。</li>
<li>Spring的高度开放性，并不强制应用完全依赖于Spring，开发者可自由选用Spring框架的部分或全部。</li>
</ul>
<blockquote>
<p><strong>架构图</strong></p>
</blockquote>
<p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/spring_frameword.png"><br><strong>核心容器：包括 Core 、 Beans 、 Context 、 EL 模块</strong></p>
<ul>
<li>Core 模块：封装了框架依赖的最底层部分，包括资源访问、类型转换及一些常用工具类。</li>
<li>Beans 模块：提供了框架的基础部分，包括控制反转（ IOC ）和依赖注入（ DI ）。其中 BeanFactory 是容器核心，本质是“工厂设计模式”的实现，而且无需编程实现“单例设计模式”，单例完全由容器控制，而且提倡面向接口编程，而非面向实现编程；所有应用程序对象及对象间关系由框架管理，从而真正从程序逻辑中把维护对象之间的依赖关系提取出来，所有这些依赖关系都由 BeanFactory 来维护。</li>
<li>Context 模块：以 Core 和 Beans 为基础，集成 Beans 模块功能并添加资源绑定、数据验证、国际化、 Java EE 支持、容器生命周期、事件传播等；核心接口是 ApplicationContext 。</li>
<li>EL 模块：提供强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从 Spring 容器获取 Bean， 它也支持列表投影、选择和一般的列表聚合等。</li>
</ul>
<hr>
<ul>
<li>AOP 模块： Spring AOP 模块提供了符合 AOP Alliance 规范的面向切面的编程（ aspect-oriented programming ）实现，提供比如日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，并且能动态的把这些功能添加到需要的代码中；这样各专其职，降低业务逻辑和通用功能的耦合。</li>
<li>Aspects 模块：提供了对 AspectJ 的集成，AspectJ 提供了比 Spring ASP 更强大的功能。</li>
<li>数据访问/集成模块：该模块包括了 JDBC 、 ORM 、 OXM 、 JMS 和事务管理。<br>事务模块：该模块用于 Spring 管理事务，只要是 Spring 管理对象都能得到 Spring 管理事务的好处，无需在代码中进行事务控制了，而且支持编程和声明性的事务管理。</li>
<li>JDBC 模块：提供了一个 JBDC 的样例模板，使用这些模板能消除传统冗长的 JDBC 编码还有必须的事务控制，而且能享受到 Spring 管理事务的好处。<br>ORM 模块：提供与流行的“对象-关系”映射框架的无缝集成，包括 Hibernate 、JPA 、 MyBatis 等。而且可以使用 Spring 事务管理，无需额外控制事务。<br>OXM 模块：提供了一个对 Object / XML 映射实现，将 java 对象映射成 XML 数据，或者将 XML 数据映射成 java 对象， Object / XML 映射实现包括 JAXB 、 Castor 、 XMLBeans 和 XStream 。</li>
<li>JMS 模块：用于 JMS ( Java Messaging Service )，提供一套 “消息生产者、消息消费者”模板用于更加简单的使用 JMS ， JMS 用于用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</li>
<li>Web / Remoting 模块： Web / Remoting 模块包含了 Web 、 Web-Servlet 、 Web-Struts 、 Web-Porlet 模块。</li>
<li>Web 模块：提供了基础的 web 功能。例如多文件上传、集成 IoC 容器、远程过程访问（ RMI 、Hessian 、 Burlap ）以及 Web Service 支持，并提供一个 RestTemplate 类来提供方便的 Restful services 访问。<br>Web-Servlet 模块：提供了一个 Spring MVC Web 框架实现。Spring MVC 框架提供了基于注解的请求资源注入、更简单的数据绑定、数据验证等及一套非常易用的 JSP 标签，完全无缝与 Spring 其他技术协作。</li>
<li>Web-Struts 模块：提供了与 Struts 无缝集成， Struts1.x 和 Struts2.x 都支持。</li>
<li>Test 模块： Spring 支持 Junit 和 TestNG 测试框架，而且还额外提供了一些基于 Spring 的测试功能，比如在测试 Web 框架时，模拟 Http 请求的功能。</li>
</ul>
<hr>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>框架</tag>
        <tag>Java EE</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis批量更新的两种方式</title>
    <url>/posts/bff75e50/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/weixin_2019.04.23.png' >
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>在使用Mybatis框架的过程中,经常会通过构建动态SQL来处理批量插入，批量更新数据等相关操作，本文将以批量更新为例，简单介绍其使用过程</p>
</blockquote>
<h3 id="动态SQL元素"><a href="#动态SQL元素" class="headerlink" title="动态SQL元素"></a>动态SQL元素</h3><p> <kbd>if</kbd> <kbd>set</kbd> <kbd>trim</kbd>  <kbd>foreach</kbd></p>
<h2 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h2><p>映射方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateOrderItem</span><span class="params">(List&lt;OrderItem&gt; list)</span></span>;</span><br></pre></td></tr></table></figure>
<p>实体类字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer orderId;</span><br><span class="line">    <span class="keyword">private</span> Integer productId;</span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;OrderItem&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">OrderItem orderItem=<span class="keyword">new</span> OrderItem();</span><br><span class="line">orderItem.setCount(<span class="number">66</span>);</span><br><span class="line">orderItem.setId(<span class="number">1</span>);</span><br><span class="line">OrderItem orderItem1=<span class="keyword">new</span> OrderItem();</span><br><span class="line">orderItem1.setCount(<span class="number">5</span>);</span><br><span class="line">orderItem1.setId(<span class="number">2</span>);</span><br><span class="line">list.add(orderItem);</span><br><span class="line">list.add(orderItem1);</span><br><span class="line">orderItemMapper.updateOrderItem(list);</span><br></pre></td></tr></table></figure>

<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateOrderItem&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span>  <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">    update order_item</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.orderId != null&quot;</span>&gt;</span></span><br><span class="line">        order_id = #&#123;item.orderId&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.productId != null&quot;</span>&gt;</span></span><br><span class="line">        product_id = #&#123;item.productId&#125;,</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.count != null&quot;</span>&gt;</span></span><br><span class="line">        count = #&#123;item.count&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;item.id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对应SQL:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[cn.srblog.dao.OrderItemMapper.updateOrderItem]<span class="operator">-</span><span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>  Preparing: update order_item <span class="keyword">SET</span> count <span class="operator">=</span> ? <span class="keyword">where</span> id <span class="operator">=</span> ? ; update order_item <span class="keyword">SET</span> count <span class="operator">=</span> ? <span class="keyword">where</span> id <span class="operator">=</span> ? </span><br><span class="line">[cn.srblog.dao.OrderItemMapper.updateOrderItem]<span class="operator">-</span><span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> Parameters: <span class="number">66</span>(<span class="type">Integer</span>), <span class="number">1</span>(<span class="type">Integer</span>), <span class="number">5</span>(<span class="type">Integer</span>), <span class="number">2</span>(<span class="type">Integer</span>)</span><br><span class="line">[cn.srblog.dao.OrderItemMapper.updateOrderItem]<span class="operator">-</span><span class="operator">&lt;=</span><span class="operator">=</span>    Updates: <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>此方式需要允许MySQL的一次执行多条SQL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/ssm?characterEncoding=utf-8&amp;allowMultiQueries=true</span></span><br></pre></td></tr></table></figure>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateOrderItem&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">      update order_item</span><br><span class="line">      <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;orderId = case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.orderId != null&quot;</span>&gt;</span></span><br><span class="line">              when id=#&#123;item.id&#125; then #&#123;item.orderId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;productId = case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.productId != null&quot;</span>&gt;</span></span><br><span class="line">              when id=#&#123;item.id&#125; then #&#123;item.productId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;count = case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.count != null&quot;</span>&gt;</span></span><br><span class="line">              when id=#&#123;item.id&#125; then #&#123;item.count&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">       where id in</span><br><span class="line">      <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;idNames&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;item.objectId != null&quot;</span>&gt;</span></span><br><span class="line">                 #&#123;item.id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对应SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[cn.srblog.dao.OrderItemMapper.updateOrderItem]<span class="operator">-</span><span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>  Preparing: update order_item <span class="keyword">set</span> count <span class="operator">=</span> <span class="keyword">case</span> <span class="keyword">when</span> id<span class="operator">=</span>? <span class="keyword">then</span> ? <span class="keyword">when</span> id<span class="operator">=</span>? <span class="keyword">then</span> ? <span class="keyword">end</span>  <span class="keyword">where</span> id <span class="keyword">in</span> (?,?)</span><br><span class="line">[cn.srblog.dao.OrderItemMapper.updateOrderItem]<span class="operator">-</span><span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> Parameters: <span class="number">1</span>(<span class="type">Integer</span>), <span class="number">66</span>(<span class="type">Integer</span>), <span class="number">2</span>(<span class="type">Integer</span>), <span class="number">5</span>(<span class="type">Integer</span>),<span class="number">1</span>(<span class="type">Integer</span>), <span class="number">2</span>(<span class="type">Integer</span>)</span><br><span class="line">[cn.srblog.dao.OrderItemMapper.updateOrderItem]<span class="operator">-</span><span class="operator">&lt;=</span><span class="operator">=</span>    Updates: <span class="number">3</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Mybatis</tag>
        <tag>动态SQL</tag>
        <tag>ORM</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架入门(二):安装配置</title>
    <url>/posts/1df93bf0/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/wx_title2_2018.10.30.png' >
<span id="more"></span>

<blockquote>
<h5 id="下载架包"><a href="#下载架包" class="headerlink" title="下载架包"></a>下载架包</h5></blockquote>
<p>这里以4.3.20版本为例，点击下载:<a href="http://repo.spring.io/release/org/springframework/spring/4.3.20.RELEASE/spring-framework-4.3.20.RELEASE-dist.zip">SpringFramewoek 4.3.20版本</a></p>
<hr>
<h6 id="解压缩后目录"><a href="#解压缩后目录" class="headerlink" title="解压缩后目录:"></a>解压缩后目录:</h6><p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/20181030144323.png" alt="解压缩"></p>
<p>— docs目录为api和开发文档介绍，schema目录为配置xml的schema约束文件，libs文件夹中为我们要使用的架包<br><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/lib20181030144732.png" alt="在这里插入图片描述"><br><strong><font color=red size=3>注意：</font>另外还要下载spring的依赖架包:</strong> <a href="http://mirrors.shu.edu.cn/apache//commons/logging/binaries/commons-logging-1.2-bin.zip">commons-logging</a></p>
<hr>
<blockquote>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5></blockquote>
<h6 id="1-打开IDE工具，新建项目，导入上文下载好的架包"><a href="#1-打开IDE工具，新建项目，导入上文下载好的架包" class="headerlink" title="1. 打开IDE工具，新建项目，导入上文下载好的架包"></a>1. 打开IDE工具，新建项目，导入上文下载好的架包</h6><p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/prolibs20181030154520.png" alt="导入项目"></p>
<h6 id="2-创建实体类并意添加一个方法打印输入"><a href="#2-创建实体类并意添加一个方法打印输入" class="headerlink" title="2. 创建实体类并意添加一个方法打印输入"></a>2. 创建实体类并意添加一个方法打印输入</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sr.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isSelf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;我是谁，我在哪，我在干什么&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="3-在src目录下-创建xml文件"><a href="#3-在src目录下-创建xml文件" class="headerlink" title="3. 在src目录下 创建xml文件"></a>3. 在src目录下 创建xml文件</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置javabean对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.sr.spring.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="4-创建测试类"><a href="#4-创建测试类" class="headerlink" title="4. 创建测试类"></a>4. 创建测试类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sr.spring;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过xml文件获取Spring的上下文对象</span></span><br><span class="line">		ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">		<span class="comment">//通过id获取Spring管理的JavaBean对象</span></span><br><span class="line">		User user = (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">		System.out.println(user);</span><br><span class="line">		user.isSelf();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h5 id="配置完成"><a href="#配置完成" class="headerlink" title="配置完成"></a>配置完成</h5></blockquote>
<p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/prolibs.png"></p>
<p>如图所示，即配置成功。</p>
<hr>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>框架</tag>
        <tag>Java EE</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架入门(三):依赖注入和控制反转</title>
    <url>/posts/2d0cab43/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/spring3_2018.10.31.png' >
<span id="more"></span>

<h1 id="依赖注入和控制反转概念"><a href="#依赖注入和控制反转概念" class="headerlink" title="依赖注入和控制反转概念"></a>依赖注入和控制反转概念</h1><p>依赖注入(IoC) 和 控制反转(DI) 有什么关系呢？其实它们是同一个概念的不同角度描述。</p>
<h2 id="依赖注入-Dependency-injection"><a href="#依赖注入-Dependency-injection" class="headerlink" title="依赖注入(Dependency injection)"></a>依赖注入(Dependency injection)</h2><blockquote>
<p>是指应用在运行期，由外部容器（Spring容器）动态地将依赖对象注入到另一个对象中。</p>
</blockquote>
<p>理解 DI 的关键是：<font color="red">“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”</font>：</p>
<ul>
<li>谁依赖于谁：当然是某个容器管理对象依赖于 IoC 容器；“被注入对象的对象”依赖于“依赖对象”；</li>
<li>为什么需要依赖：容器管理对象需要 IoC 容器来提供对象需要的外部资源；</li>
<li>谁注入谁：很明显是 IoC 容器注入某个对象，也就是注入“依赖对象”；</li>
<li>注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</li>
</ul>
<h2 id="控制反转-Inversion-Of-Control"><a href="#控制反转-Inversion-Of-Control" class="headerlink" title="控制反转(Inversion Of Control)"></a>控制反转(Inversion Of Control)</h2><blockquote>
<p>IoC 容器就是具有依赖注入功能的容器，IoC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。应用程序无需直接在代码中 new 相关的对象，应用程序由 IoC 容器进行组装。</p>
</blockquote>
<h3 id="在传统模式下通常有两种做法："><a href="#在传统模式下通常有两种做法：" class="headerlink" title="在传统模式下通常有两种做法："></a>在传统模式下通常有两种做法：</h3><ul>
<li>原始做法: 调用者主动创建被依赖对象，然后再调用被依赖对象的方法。</li>
<li>简单工厂模式: 调用者先找到被依赖对象的工厂，然后主动通过工厂去获取被依赖对象，最后再调用被依赖对象的方法。</li>
</ul>
<h3 id="Spring容器的依赖注入"><a href="#Spring容器的依赖注入" class="headerlink" title="Spring容器的依赖注入"></a>Spring容器的依赖注入</h3><ul>
<li><p>设值注入：是指IoC容器通过成员变量的setter方法来注入被依赖对象。这种注入方式简单、直观，因而在Spring的依赖注入里大量使用。</p>
</li>
<li><p>构造注入：利用构造器来设置依赖关系的方式，被称为构造注入。通过构造器参数对成员变量执行初始化，驱动Spring在底层以反射方式执行带指定参数的构造器。</p>
</li>
</ul>
<p><strong>注意：</strong> 建议采用设值注入为主，构造注入为辅的注入策略。对于依赖关系无须变化的注入，尽量采用构造注入；而其他依赖关系的注入，则考虑采用设值注入。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight xml"><figcaption><span>请自行配置，以下仅为示例代码</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过property属性注入（必须提供set方法） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.sr.spring.javabean.User&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过构造函数注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.sr.spring.javabean.User&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//除此之外还可以注入集合类型的对象，List、Set、Map、Properties……</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Spring容器中的Bean"><a href="#Spring容器中的Bean" class="headerlink" title="Spring容器中的Bean"></a>Spring容器中的Bean</h1><blockquote>
<p>对于开发者来说，开发者使用Spring框架主要是做两件事：①开发Bean；②配置Bean。对于Spring框架来说，它要做的就是根据配置文件来创建Bean实例，并调用Bean实例的方法完成”依赖注入”——这就是所谓IoC的本质。</p>
</blockquote>
<h2 id="容器中Bean的作用域"><a href="#容器中Bean的作用域" class="headerlink" title="容器中Bean的作用域"></a>容器中Bean的作用域</h2><p>当通过Spring容器创建一个Bean实例时，不仅可以完成Bean实例的实例化，还可以为Bean指定特定的作用域。Spring支持如下五种作用域：</p>
<ul>
<li><p>singleton: 单例模式，在整个Spring IoC容器中，singleton作用域的Bean将只生成一个实例。</p>
</li>
<li><p>prototype: 每次通过容器的getBean()方法获取prototype作用域的Bean时，都将产生一个新的Bean实例。</p>
</li>
<li><p>request: 对于一次HTTP请求，request作用域的Bean将只生成一个实例，这意味着，在同一次HTTP请求内，程序每次请求该Bean，得到的总是同一个实例。只有在Web应用中使用Spring时，该作用域才真正有效。</p>
</li>
<li><p>session：该作用域将 bean 的定义限制为 HTTP 会话。 只在web-aware Spring ApplicationContext的上下文中有效。</p>
</li>
<li><p>global session: 每个全局的HTTP Session对应一个Bean实例。在典型的情况下，仅在使用portlet context的时候有效，同样只在Web应用中有效。</p>
</li>
</ul>
<h3 id="配置格式如下："><a href="#配置格式如下：" class="headerlink" title="配置格式如下："></a>配置格式如下：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;…&quot;</span> <span class="attr">class</span>=<span class="string">&quot;…&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果不指定Bean的作用域，Spring默认使用singleton作用域。prototype作用域的Bean的创建、销毁代价比较大。而singleton作用域的Bean实例一旦创建成果，就可以重复使用。因此，应该尽量避免将Bean设置成prototype作用域。</p>
</blockquote>
<h2 id="创建Bean的3种方式"><a href="#创建Bean的3种方式" class="headerlink" title="创建Bean的3种方式"></a>创建Bean的3种方式</h2><ol>
<li><p>使用构造器创建Bean实例:<br>需要提供无参数的构造器,Spring对Bean实例的所有属性执行默认初始化，即所有的基本类型的值初始化为0或false；所有的引用类型的值初始化为null。</p>
</li>
<li><p>使用静态工厂方法创建Bean:<br>class属性须指定静态工厂类，使用factory-method属性来指定静态工厂方法，如果静态工厂方法需要参数，则使用&lt;constructor-arg…/&gt;元素指定静态工厂方法的参数。</p>
</li>
</ol>
<figure class="highlight xml"><figcaption><span>示例配置</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.sr.spring.javabean.UserFactory&quot;</span> <span class="attr">factory-mothod</span>=<span class="string">&quot;getUser&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>UserFactory工厂类</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sr.spring.javabean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line">	<span class="comment">//对应factory-method</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是&quot;</span>+name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用实例工厂方法创建Bean:</li>
</ol>
<ul>
<li>factory-bean指定工厂实例</li>
<li>factory-method指定实例工厂的工厂方法。</li>
<li>若调用实例工厂方法时需要传入参数，则使用&lt;constructor-arg…/&gt;元素确定参数值。</li>
</ul>
<figure class="highlight xml"><figcaption><span>示例配置</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.sr.spring.javabean.UserFactory&quot;</span> /&gt;</span></span><br><span class="line">//此时getUser方法应为非静态</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">factory-mothod</span>=<span class="string">&quot;getUser&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><p>这里简单的说明一下，对于作用域为prototype的Bean，Spring在仅仅负责创建Bean，每当容器创建Bean后就交给客户端的代码进行维护。但是对应singlton作用域的Bean，Spring会进行创建一次，然后整个容器中共享。所以Spring容器会负责进行跟踪其状态,负责依赖的注入和依赖实例的分配。</p>
<hr>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>本文只是做简单介绍，个人理解方面偏多，更多有关于IOC和DI以及Bean对象的详解介绍请自行查找相关资料！</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>框架</tag>
        <tag>Java EE</tag>
        <tag>IOC</tag>
        <tag>DI</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat服务器配置Https协议</title>
    <url>/posts/8baea545/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/wx_title_2019.04.25.png'>
<span id="more"></span>
 
### 前言
> 日常开发项目时,一般本机都是基于http协议,但是要实现某些需求必须要开启https协议。
> 现在https协议已经成为主流,网站如果未开启https协议,浏览器会进行安全提示。
> 本文以**Tomcat**服务器为例,简单介绍如何在**本机开发环境**配置https协议

<h3 id="证书生成"><a href="#证书生成" class="headerlink" title="证书生成"></a>证书生成</h3><p><strong>使用JDK自带的keytool工具来生成证书库</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">keytool -genkeypair -alias <span class="string">&quot;tomcat&quot;</span> -keyalg <span class="string">&quot;RSA&quot;</span> -keystore <span class="string">&quot;d:\https\tomcat.keystore&quot;</span>  </span><br></pre></td></tr></table></figure>
<p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/2019-4-25-https1.png"></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>alias</td>
<td>证书别名</td>
</tr>
<tr>
<td>keyalg</td>
<td>加密算法,RSA</td>
</tr>
<tr>
<td>keystore</td>
<td>证书保存路径</td>
</tr>
</tbody></table>
<h3 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h3><p> <strong>修改Tomcat配置文件</strong>：<br>打开Tomcat安装目录/conf/server.xml,修改如下配置,并取消注释<br>注：这里以Tomcat8.0为例,8.5以上配置请另行百度</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">SSLEnabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span> <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">clientAuth</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sslProtocol</span>=<span class="string">&quot;TLS&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">keystoreFile</span>=<span class="string">&quot;d:\https\tomcat.keystore&quot;</span>  <span class="attr">keystorePass</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//localhost:8443/</span></span><br></pre></td></tr></table></figure>
<p>访问链接,浏览器会提示站点不安全，点击继续访问即可(<strong>本地安装证书</strong>或者<strong>互联网申请证书解决</strong>)<br><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/2019-4-25-https2.png" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>Tomcat</tag>
        <tag>Https协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<h3 id="永远相信美好的事情即将发生"><a href="#永远相信美好的事情即将发生" class="headerlink" title="永远相信美好的事情即将发生~"></a>永远相信美好的事情即将发生~</h3>]]></content>
  </entry>
  <entry>
    <title>一段Js代码开启任意网站的匿名聊天室</title>
    <url>/posts/ccb2c90f/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/blog_chart_2018.12.05.png'>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>一个&#39;神奇&#39;的在线聊天室 (http://www.topurl.cn/)
</code></pre>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol>
<li>浏览器控制台输入<figure class="highlight js"><figcaption><span>浏览器控制台输入</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">s.src=<span class="string">&#x27;//topurl.cn/chat.js&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.append(s);</span><br></pre></td></tr></table></figure></li>
<li>地址栏输入<figure class="highlight js"><figcaption><span>地址栏输入</span></figcaption><table><tr><td class="code"><pre><span class="line">javascript:<span class="keyword">var</span> s=<span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);s.src=<span class="string">&#x27;//topurl.cn/chat.js&#x27;</span>;<span class="built_in">document</span>.body.append(s);</span><br></pre></td></tr></table></figure></li>
<li>书签<br>地址为方法2中的代码</li>
</ol>
<h2 id="动图演示"><a href="#动图演示" class="headerlink" title="动图演示"></a>动图演示</h2><p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/gif/blog_chart_2018.12.05.gif"></p>
]]></content>
      <tags>
        <tag>JS</tag>
        <tag>聊天室</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯-历届试题-Excel地址</title>
    <url>/posts/b1245755/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote>
<p>Excel单元格的地址表示很有趣，它使用字母来表示列号。<br>　　比如，<br>　　A表示第1列，<br>　　B表示第2列，<br>　　Z表示第26列，<br>　　AA表示第27列，<br>　　AB表示第28列，<br>　　BA表示第53列，<br>　　….<br>　　当然Excel的最大列号是有限度的，所以转换起来不难。<br>　　如果我们想把这种表示法一般化，可以把很大的数字转换为很长的字母序列呢？<br>　　本题目即是要求对输入的数字, 输出其对应的Excel地址表示方式。</p>
</blockquote>
<span id="more"></span>
<hr>
<p><strong>样例输入</strong><br>      26<br><strong>样例输出</strong><br>      Z<br><strong>样例输入</strong><br>      2054<br><strong>样例输出</strong><br>      BZZ</p>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, i;</span><br><span class="line">	<span class="keyword">int</span> cont = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span> (n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n % <span class="number">26</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a[cont++] = <span class="number">26</span> + <span class="number">64</span>;</span><br><span class="line">			n /= <span class="number">26</span>;</span><br><span class="line">			n--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			a[cont++] = n % <span class="number">26</span> + <span class="number">64</span>;</span><br><span class="line">			n /= <span class="number">26</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = cont - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>蓝桥杯</tag>
        <tag>算法</tag>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>记录腾讯云服务器当矿机的一天</title>
    <url>/posts/23f6ec83/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/wx_title_2019-11-26-0.png' >
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近入手了一台腾讯云服务器玩玩，兴致勃勃的装上<code>Docker</code>，打算把之前的<code>SpringBoot</code>项目跑一跑。</p>
<p>安装<code>Docker</code>、配置<code>Maven Docker</code>插件、开放<code>Docker</code>远程端口(这里划重点要考)、配置服务器安全组端口、编写<code>Dockerfile</code>文件、打包上传镜像、运行项目,一切都很正常。</p>
<p>第二天早上，再次登录服务器时发现特别卡，下意识以为是自己运行项目的问题，初步排查一下，CPU占用100%，2M小水管带宽被占满……</p>
<h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><h3 id="TOP命令查看进程信息"><a href="#TOP命令查看进程信息" class="headerlink" title="TOP命令查看进程信息"></a><code>TOP</code>命令查看进程信息</h3><ul>
<li><p><code>TOP</code>命令查看进程信息，可以看到“sic”这个进程内存占用非常高，下面的“masscan”进程占用也相当高(百度发现可能是扫描端口的程序)</p>
<p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/2019-11-26-192508-3.png"></p>
</li>
</ul>
<h3 id="定位进程文件"><a href="#定位进程文件" class="headerlink" title="定位进程文件"></a>定位进程文件</h3><ul>
<li><p>根据<code>PID</code>执行命令,<code>ll  /proc/7844</code>,发现执行路径在 /var/tmp/sic/sic ,同目录有一个<code>config.json</code>文件,其内容如下图,百度一下发现各个属性像极了挖矿程序的配置 - .-</p>
<p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/2019-11-26-192525-2.png"></p>
</li>
</ul>
<h3 id="查看定时任务"><a href="#查看定时任务" class="headerlink" title="查看定时任务"></a>查看定时任务</h3><ul>
<li>执行<code>crontab -l</code>命令,发现三个异常任务,以第一个为例，<code>corn表达式</code>0,30 * * * *表示每0分钟和每三十分钟执行一次任务,网址返回的为一段shell脚本代码,通过管道在本地执行脚本，任务三则是每0秒(每分钟)执行一段<code>Python</code>脚本，任务四是腾讯云的监控组件。</li>
<li>脚本内容大概就是通过<code>ssh</code>提权,删除系统日志,卸载安全组件,挖矿程序,代理服务等,然后定时执行，循环往复。</li>
</ul>
<p><img data-src="https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/2019-11-26-192531-1.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>百度一圈发现是因为<code>Docker</code>的远程服务没有任何加密措施，黑客可以远程直接运行任意容器,通过<code>-v</code> 命令(数据卷)将他的<code>ssh</code>公钥挂载到宿主机的<code>/root/.ssh</code>目录，从而实现提权。</p>
<p>傻乎乎当了一天矿机,出于安全考虑(系统已经惨不忍睹,也无法保证没有其他暗门),我立刻更换了公网IP,并且重置了系统镜像,然后我又安装上了<code>Docker</code>，不同的是这次我老老实实地在本地构建了镜像~</p>
]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>Docker</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>最大间隔数-桶排序应用</title>
    <url>/posts/28e83e0e/</url>
    <content><![CDATA[<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/2019-05-23_wx_title.png' >
<span id="more"></span>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote>
<p>给定一个未排序的数组，返回其排序后的数组中<strong>相邻元素之差</strong>的最大值<br>例：给定数组：[5,9,8,3,15]<br>&emsp;&emsp;&emsp;排序后：[3,5,8,9,15]<br>相邻元素之差最大的是15-9=6,结果即为6。<br>要求:时间空间复杂度均为O(n)。</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaximumGap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maximumGap</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            min = Math.min(min, arr[i]);</span><br><span class="line">            max = Math.max(max, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min == max) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> book[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> maxs[] = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> mins[] = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 划分桶号</span></span><br><span class="line">            id = (<span class="keyword">int</span>) ((arr[i] - min) * len / (max - min));</span><br><span class="line">            mins[id] = book[id] ? Math.min(mins[id], arr[i]) : arr[i];</span><br><span class="line">            maxs[id] = book[id] ? Math.max(maxs[id], arr[i]) : arr[i];</span><br><span class="line">            book[id] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 第一个桶内默认是最小值</span></span><br><span class="line">        <span class="keyword">int</span> lastMax = maxs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt;= len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (book[i]) &#123;</span><br><span class="line">                <span class="comment">// 两个相邻的非空桶，后一个的最小值减去前一个的最大值为相对间隔最大值</span></span><br><span class="line">                res = Math.max(res, mins[i] - lastMax);</span><br><span class="line">                <span class="comment">// 当前桶的最大值更新为前一个最大值</span></span><br><span class="line">                lastMax = maxs[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">comparator</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">int</span> gap = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            gap = Math.max(arr[i] - arr[i - <span class="number">1</span>], gap);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getRandomArray(<span class="keyword">int</span> maxSize, <span class="keyword">int</span> maxValue) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="keyword">int</span>) ((maxSize + <span class="number">1</span>) * Math.random())];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取 -maxVlaue + 1 ~ maxValue 的值</span></span><br><span class="line">            arr[i] = (<span class="keyword">int</span>) ((maxValue + <span class="number">1</span>) * Math.random()) - (<span class="keyword">int</span>) (maxValue * Math.random());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] copyArray(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] book = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            book[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 测试次数</span></span><br><span class="line">        <span class="keyword">int</span> test = <span class="number">50000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组长度</span></span><br><span class="line">        <span class="keyword">int</span> maxSize = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最大数值</span></span><br><span class="line">        <span class="keyword">int</span> maxValue = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; test; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> arr1[] = getRandomArray(maxSize, maxValue);</span><br><span class="line">            <span class="comment">// 拷贝比较</span></span><br><span class="line">            <span class="keyword">int</span> arr2[] = copyArray(arr1);</span><br><span class="line">            <span class="keyword">if</span> (maximumGap(arr1) != comparator(arr2)) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(flag ? <span class="string">&quot;测试正常&quot;</span> : <span class="string">&quot;发生错误&quot;</span>);</span><br><span class="line">        <span class="comment">// 随机测试一组数据</span></span><br><span class="line">        <span class="keyword">int</span> arr[] = getRandomArray(maxSize, maxValue);</span><br><span class="line">        <span class="keyword">int</span> t = maximumGap(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组:&quot;</span>+Arrays.toString(arr));</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后:&quot;</span>+Arrays.toString(arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;最大差值:&quot;</span>+t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>桶排序</tag>
        <tag>对数器</tag>
      </tags>
  </entry>
  <entry>
    <title>荷兰国旗-快速排序应用</title>
    <url>/posts/5644be5d/</url>
    <content><![CDATA[<hr>
<img data-src='https://blog-resource-1251242863.cos.ap-shanghai.myqcloud.com/imags/2019-04-20%20.png' height=120px >

<hr>
<span id="more"></span>

<h2 id="荷兰国旗"><a href="#荷兰国旗" class="headerlink" title="荷兰国旗"></a>荷兰国旗</h2><blockquote>
<p>”荷兰国旗难题“是计算机科学中的一个程序难题，它是由Edsger Dijkstra提出的。荷兰国旗是由红、白、蓝三色组成的。现有红白蓝三个不同颜色的小球，乱序排列在一起，请重新排列这些小球，使得红白蓝三色的同颜色的球在一起。<br>ps:我们可以将红白蓝三色小球想象成条状物，有序排列后正好组成荷兰国旗。</p>
</blockquote>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><blockquote>
<p>arr[i]&lt; key时相当于“荷兰国旗问题”中的0<br>arr[i]= key时相当于“荷兰国旗问题”中的1<br>arr[i]&gt; key时相当于“荷兰国旗问题”中的2</p>
</blockquote>
<p>这样就可以使用“荷兰国旗问题”的解法来解决快速排序了，这样一来，即使待排序的元素中有一些元素和key一样，也能保证时间复杂度是最差是NlogN的，因为对于待排序的等于Key的数值，可以在执行下一次Partition时直接跳过，利于数据规模的降低。</p>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><figcaption><span>荷兰国旗</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetherlandsFlag</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] partition(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> p) &#123;</span><br><span class="line">		<span class="keyword">int</span> less = L-<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> more = R+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(L &lt; more) &#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[L] &lt; p) &#123;</span><br><span class="line">				swap(arr,++less,L++);</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[L] &gt; p) &#123;</span><br><span class="line">				swap(arr,--more,L);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				L++;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;less+<span class="number">1</span>,more-<span class="number">1</span>&#125;;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">     </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> temp = arr[i];</span><br><span class="line">		arr[i] = arr[j];</span><br><span class="line">		arr[j] = temp;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getArray() &#123;</span><br><span class="line">		<span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">			arr[i] = (<span class="keyword">int</span>)(Math.random()*<span class="number">3</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> arr;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">			System.out.print(arr[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> test[] = getArray();</span><br><span class="line">		printArray(test);                             </span><br><span class="line">		<span class="keyword">int</span> res[] = partition(test,<span class="number">0</span>,test.length-<span class="number">1</span>,<span class="number">1</span>);   <span class="comment">//p值为1，用来判断0，1，2   </span></span><br><span class="line">		printArray(test);</span><br><span class="line">		System.out.println(res[<span class="number">0</span>]);</span><br><span class="line">		System.out.println(res[<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
</search>
